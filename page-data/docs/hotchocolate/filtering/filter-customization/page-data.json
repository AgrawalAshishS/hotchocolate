{"componentChunkName":"component---src-templates-doc-page-template-tsx","path":"/docs/hotchocolate/filtering/filter-customization","result":{"data":{"file":{"childMarkdownRemark":{"fields":{"slug":"/hotchocolate/filtering/filter-customization/"},"frontmatter":{"title":"Filtering - Customizing Filter"},"html":"<p>Hot Chocolate provides different APIs to customize filtering. You can write custom filter input types, customize the inference behavior of .NET Objects, customize the generated expression, or create a custom visitor and attach your exotic database.</p>\n<p><strong>As this can be a bit overwhelming the following questionnaire might help:</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>You do not want all of the generated filters and only allow a particular set of filters in a specific case?</em></td>\n<td>Custom FilterInputType</td>\n</tr>\n<tr>\n<td><em>You want to change the name of a field or a whole type?</em></td>\n<td>Custom FilterInputType</td>\n</tr>\n<tr>\n<td><em>You want to change the name of the <code class=\"language-text\">where</code> argument?</em></td>\n<td>Filter Conventions ArgumentName</td>\n</tr>\n<tr>\n<td><em>You want to configure how the name and the description of filters are generated in general? e.g. <code class=\"language-text\">PascalCaseFilterType</code>?</em></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You want to configure what filters are allowed in general?</em></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You want to change the naming of a particular filter type? e.g.</em> <code class=\"language-text\">foo_contains</code> <em>should be</em> <code class=\"language-text\">foo_like</code></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You want to customize the expression a filter is generating: e.g.</em> <code class=\"language-text\">_equals</code> <em>should not be case sensitive?</em></td>\n<td>Expression Visitor </td>\n</tr>\n<tr>\n<td><em>You want to create your own filter types with custom parameters and custom expressions? e.g. GeoJson?</em></td>\n<td>Filter Conventions</td>\n</tr>\n<tr>\n<td><em>You have a database client that does not support <code class=\"language-text\">IQueryable</code> and wants to generate filters for it?</em></td>\n<td>Custom Visitor</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"custom-filterinputtype\" style=\"position:relative;\"><a href=\"#custom-filterinputtype\" aria-label=\"custom filterinputtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom FilterInputType</h2>\n<p>Under the hood, filtering is based on top of normal <em>Hot Chocolate</em> input types. You can easily customize them with a very familiar fluent interface. The filter input types follow the same <code class=\"language-text\">descriptor</code> scheme as you are used to from the normal filter input types. Just extend the base class <code class=\"language-text\">FilterInputType&lt;T&gt;</code> and override the descriptor method.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> LastName <span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">IFilterInputTypeDescriptor&lt;T&gt;</code> supports most of the methods of <code class=\"language-text\">IInputTypeDescriptor&lt;T&gt;</code> and adds the configuration interface for the filters. By default filters for all fields of the type are generated.\nIf you do want to specify the filters by yourself you can change this behavior with <code class=\"language-text\">BindFields</code>, <code class=\"language-text\">BindFieldsExplicitly</code> or <code class=\"language-text\">BindFieldsImplicitly</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">BindFieldsExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To add or customize a filter you have to use <code class=\"language-text\">Filter(x =&gt; x.Foo)</code> for scalars <code class=\"language-text\">List(x =&gt; x.Bar)</code> for lists and <code class=\"language-text\">Object(x =&gt; x.Baz)</code> for nested objects.\nThese methods will return fluent interfaces to configure the filter for the selected field.</p>\n<p>A field has different filter operations that can be configured. You will find more about filter types and filter operations here &#x3C;<LINK>>\nWhen fields are bound implicitly, meaning filters are added for all properties, you may want to hide a few fields. You can do this with <code class=\"language-text\">Ignore(x =&gt; Bar)</code>.\nOperations on fields can again be bound implicitly or explicitly. By default, operations are generated for all fields of the type.\nIf you do want to specify the operations by yourself you can change this behavior with <code class=\"language-text\">BindFilters</code>, <code class=\"language-text\">BindFiltersExplicitly</code> or <code class=\"language-text\">BindFiltersImplicitly</code>.</p>\n<p>It is also possible to customize the GraphQL field of the operation further. You can change the name, add a description or directive.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFilterType</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterInputType<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">IFilterInputTypeDescriptor<span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span> descriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// descriptor.BindFieldsImplicitly(); &lt;- is already the default</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">BindFilterExplicitly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">AllowContains</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checks if the provided string is contained in the `Name` of a User\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">And</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">AllowEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exits_with_name\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">exits_with_name</span><span class=\"token punctuation\">:</span> String <span class=\"token directive function\">@name</span>\n  <span class=\"token string\">\"\"</span>\"\n  Checks if the provided string is contained in the `Name` of a User\n  <span class=\"token string\">\"\"</span>\"\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>API Documentation</strong></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">BindFields</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BindingBehavior</span> bindingBehavior<span class=\"token punctuation\">)</span></code></td>\n<td>Defines the filter binding behavior. <code class=\"language-text\">Explicitly</code>or <code class=\"language-text\">Implicitly</code>. Default is <code class=\"language-text\">Implicitly</code></td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\">BindFieldsExplicitly</code></td>\n<td>Defines that all filters have to be specified explicitly. This means that only the filters are applied that are added with <code class=\"language-text\">Filter(x =&gt; x.Foo)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\">BindFieldsImplicitly</code></td>\n<td>The filter type will add filters for all compatible fields.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Description</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></code></td>\n<td>Adds explanatory text of the <code class=\"language-text\">FilterInputType&lt;T&gt;</code> that can be accessed via introspection.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NameString</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></code></td>\n<td>Defines the graphql name of the <code class=\"language-text\">FilterInputType&lt;T&gt;</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></td>\n<td>Ignore the specified property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a string filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a bool filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IComparable<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a comarable filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Object</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TObject<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TObject<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a object filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">List</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a array string filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">List</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a array bool filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token function\">List</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span>IComparable<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a array comarable filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Filter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TObject<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Expression<span class=\"token punctuation\">&lt;</span>Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span>TObject<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> property<span class=\"token punctuation\">)</span></code></td>\n<td>Defines a array object filter for the selected property.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TDirective<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TDirective</span> directiveInstance<span class=\"token punctuation\">)</span></code></td>\n<td>Add directive <code class=\"language-text\">directiveInstance</code> to the type</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TDirective<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TDirective</span> directiveInstance<span class=\"token punctuation\">)</span></code></td>\n<td>Add directive of type <code class=\"language-text\">TDirective</code> to the type</td>\n</tr>\n<tr>\n<td><code class=\"language-csharp\"><span class=\"token generic-method\"><span class=\"token function\">Directive</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TDirective<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NameString</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token class-name\">ArgumentNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arguments<span class=\"token punctuation\">)</span></code></td>\n<td>Add directive of type <code class=\"language-text\">TDirective</code> to the type</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"filter-conventions\" style=\"position:relative;\"><a href=\"#filter-conventions\" aria-label=\"filter conventions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter Conventions</h1>\n<p>The customization of filters with <code class=\"language-text\">FilterInputTypes&lt;T&gt;</code> works if you only want to customize one specific filter type.\nIf you want to change the behavior of all filter types, you want to create a convention for your filters. The filter convention comes with a fluent interface that is close to a type descriptor.\nYou can see the convention as a configuration object that holds the state that is used by the type system or the execution engine.</p>\n<h2 id=\"get-started\" style=\"position:relative;\"><a href=\"#get-started\" aria-label=\"get started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get Started</h2>\n<p>To use a filter convention you can extend <code class=\"language-text\">FilterConvention</code> and override the <code class=\"language-text\">Configure</code> method. Alternatively, you can directly configure the convention over the constructor argument.\nYou then have to register your custom convention on the schema builder with <code class=\"language-text\">AddConvention</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFilterConventionDescriptor</span> descriptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddConvention</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//</span>\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddConvention</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilterConvention</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token comment\">/*Config*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"convention-descriptor-basics\" style=\"position:relative;\"><a href=\"#convention-descriptor-basics\" aria-label=\"convention descriptor basics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Convention Descriptor Basics</h2>\n<p>In this section, we will take a look at the basic features of the filter convention.\nThe documentation will reference often to <code class=\"language-text\">descriptor</code>. Imagine this <code class=\"language-text\">descriptor</code> as the parameter of the Configure method of the filter convention in the following context:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomConvention</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FilterConvention</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">        IFilterConventionDescriptor descriptor</span>     <span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSchemaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddConvention</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CustomConvention<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h5 id=\"argument-name\" style=\"position:relative;\"><a href=\"#argument-name\" aria-label=\"argument name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Argument Name</h5>\n<p>With the convention descriptor, you can easily change the argument name of the <code class=\"language-text\">FilterInputType</code>.</p>\n<p><strong>Configuration</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">ArgumentName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example_argument_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">example_argument_name</span><span class=\"token punctuation\">:</span> UserFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"change-name-of-scalar-list-type-element\" style=\"position:relative;\"><a href=\"#change-name-of-scalar-list-type-element\" aria-label=\"change name of scalar list type element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Change Name of Scalar List Type Element</h5>\n<p>You can change the name of the element of the list type.</p>\n<p><strong>Configuration</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">ElementName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example_element_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> ISingleFilterOfInt16Filter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">example_element_name</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">example_element_name_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_gt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_gte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Short<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">example_element_name_not_lt</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">example_element_name_not_lte</span><span class=\"token punctuation\">:</span> Short\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ISingleFilterOfInt16Filter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"configure-filter-type-name-globally\" style=\"position:relative;\"><a href=\"#configure-filter-type-name-globally\" aria-label=\"configure filter type name globally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Filter Type Name Globally</h5>\n<p>To change the way filter types are named, you have to exchange the factory.</p>\n<p>You have to provide a delegate of the following type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\">NameString</span> <span class=\"token function\">GetFilterTypeName</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IDescriptorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Type</span> entityType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Configuration</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">TypeName</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span>types<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> context<span class=\"token punctuation\">.</span>Naming<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeName</span><span class=\"token punctuation\">(</span>entityType<span class=\"token punctuation\">,</span> TypeKind<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Custom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">users</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> UserCustom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"configure-filter-description-globally\" style=\"position:relative;\"><a href=\"#configure-filter-description-globally\" aria-label=\"configure filter description globally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Filter Description Globally</h5>\n<p>To change the way filter types are named, you have to exchange the factory.</p>\n<p>You have to provide a delegate of the following type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetFilterTypeDescription</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IDescriptorContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Type</span> entityType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Configuration</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">TypeName</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span>types<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> context<span class=\"token punctuation\">.</span>Naming<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeDescription</span><span class=\"token punctuation\">(</span>entityType<span class=\"token punctuation\">,</span> TypeKind<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Custom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token string\">\"\"</span>\"\nCustom\n<span class=\"token string\">\"\"</span>\"\n<span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">isOnline</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">isOnline_not</span><span class=\"token punctuation\">:</span> Boolean\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"reset-configuration\" style=\"position:relative;\"><a href=\"#reset-configuration\" aria-label=\"reset configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reset Configuration</h5>\n<p>By default, all predefined values are configured. To start from scratch, you need to call <code class=\"language-text\">Reset()</code>first.</p>\n<p><strong>Configuration</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong></p>\n<blockquote>\n<p><strong>⚠ Note:</strong> You will need to add a complete configuration, otherwise the filter will not work as desired!</p>\n</blockquote>\n<hr>\n<h2 id=\"describe-with-convention\" style=\"position:relative;\"><a href=\"#describe-with-convention\" aria-label=\"describe with convention permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Describe with convention</h2>\n<p>With the filter convention descriptor, you have full control over what filters are inferred, their names, operations, and a lot more.\nThe convention provides a familiar interface to the type configuration. It is recommended to first take a look at <code class=\"language-text\">Filter &amp; Operations</code> to understand the concept of filters. This will help you understand how the filter configuration works.</p>\n<p>Filtering has two core components at its heart. First, you have the inference of filters based on .NET types. The second component is an interceptor that translates the filters to the desired output and applies it to the resolver pipeline. These two parts can (and have to) be configured completely independently. With this separation, it is possible to easily extend the behavior. The descriptor is designed to be extendable by extension methods.</p>\n<h3 id=\"configuration-of-the-type-system\" style=\"position:relative;\"><a href=\"#configuration-of-the-type-system\" aria-label=\"configuration of the type system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration of the type system</h3>\n<p>In this section, we will focus mainly on the generation of the schema. If you are interested in changing how filters are translated to the database, you have to look here &#x3C;<INSERT LINK HERE>></p>\n<h5 id=\"configure-filter-operations\" style=\"position:relative;\"><a href=\"#configure-filter-operations\" aria-label=\"configure filter operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Filter Operations</h5>\n<p>Operations can be configured in two ways.</p>\n<p>You can configure a default configuration that applies to all operations of this kind. In this case the configuration for <code class=\"language-text\">FilterOperationKind.Equals</code> would be applied to all <code class=\"language-text\">FilterKind</code> that specify this operation.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you want to configure a more specific Operation e.g. <code class=\"language-text\">FilterOperationKind.Equal</code> of kind <code class=\"language-text\">FilterKind.String</code>, you can override the default behavior.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>Equals<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The operation descriptor allows you to configure the name, the description or even ignore an operation completely</p>\n<p>In this example, we will look at the following input type:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">loggingCount</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_not_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Change the name of an operation</strong></p>\n<p>To change the name of an operation you need to specify a delegate of the following type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\">NameString</span> <span class=\"token function\">CreateFieldName</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">FilterFieldDefintion</span> definition<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">FilterOperationKind</span> kind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Configuration</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\">// (A)</span></span> <span class=\"token comment\">// specifies that all not equals operations should be extended with _nada</span>\n descriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> def<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"_nada\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\">// (B)</span></span> <span class=\"token comment\">// specifies that the not equals operations should be extended with _niente.</span>\n <span class=\"token comment\">// this overrides (A)</span>\n descriptor\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span>FilterKind<span class=\"token punctuation\">.</span>Comparable<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span>FilterOperationKind<span class=\"token punctuation\">.</span>NotEquals<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> def<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">+</span> <span class=\"token string\">\"_niente\"</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>after</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">input</span> UserFilter <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">loggingCount</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_lte</span><span class=\"token punctuation\">:</span> Int\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">loggingCount_niente</span><span class=\"token punctuation\">:</span> Int   &lt;-- <span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span></span>  <span class=\"token attr-name\">loggingCount_not_gt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_gte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Int<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">loggingCount_not_lt</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">loggingCount_not_lte</span><span class=\"token punctuation\">:</span> Int\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token attr-name\">name_nada</span><span class=\"token punctuation\">:</span> String  &lt;-- <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span></span>  <span class=\"token attr-name\">name_not_contains</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_ends_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_not_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">name_not_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name_starts_with</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">AND</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n  <span class=\"token attr-name\">OR</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>UserFilter<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"site":{"siteMetadata":{"siteUrl":"https://chillicream.com","repositoryUrl":"https://github.com/ChilliCream/hotchocolate","tools":{"slack":"https://join.slack.com/t/hotchocolategraphql/shared_invite/enQtNTA4NjA0ODYwOTQ0LTViMzA2MTM4OWYwYjIxYzViYmM0YmZhYjdiNzBjOTg2ZmU1YmMwNDZiYjUyZWZlMzNiMTk1OWUxNWZhMzQwY2Q"}}},"config":{"products":[{"path":"hotchocolate","title":"Hot Chocolate","description":"Configure a GraphQL server to fetch data from multiple data sources.","items":[{"path":"index","title":"Introduction","items":null},{"path":"getting-started","title":"Getting Started","items":null},{"path":"api-reference","title":"API Reference","items":[{"path":"index","title":"Whatever"}]},{"path":"filtering","title":"Filtering","items":[{"path":"getting-started","title":"Getting Started"},{"path":"filter-and-operations","title":"Filters & Operations"},{"path":"string-filter","title":"- String Filter"},{"path":"bool-filter","title":"- Boolean Filter"},{"path":"comparable-filter","title":"- Comparable Filter"},{"path":"object-filter","title":"- Object Filter"},{"path":"list-filter","title":"- List Filter"},{"path":"filter-customization","title":"Customization"},{"path":"filter-naming-convention","title":"Naming Convention"}]}]},{"path":"bananacakepop","title":"Banana Cake Pop","description":"Use this GUI to get deep insights from any GraphQL endpoint.","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"strawberryshake","title":"Strawberry Shake","description":"Configure a GraphQL client in .Net to fetch data from multiple GraphQL endpoints.","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"marshmellowpie","title":"Marshmellow Pie","description":"Configure a GraphQL registry to keep track of any GraphQL server and client.","items":[{"path":"index","title":"Introduction","items":null}]},{"path":"greendonut","title":"Green Donut","description":"Configure data loaders and caching for GraphQL endpoints.","items":[{"path":"index","title":"Introduction","items":null}]}]}},"pageContext":{"originPath":"hotchocolate/filtering/filter-customization.md"}}}