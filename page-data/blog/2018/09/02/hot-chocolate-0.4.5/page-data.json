{"componentChunkName":"component---src-templates-blog-article-tsx","path":"/blog/2018/09/02/hot-chocolate-0.4.5","result":{"data":{"markdownRemark":{"html":"<p>With version 0.4.5 we closed a lot of spec gaps and refined the schema configuration API.</p>\n<p>We now are finished with implementing the query validation rules. The following rules were added since version 0.4.0:</p>\n<ul>\n<li>Argument Names <a href=\"https://github.com/ChilliCream/hotchocolate/issues/111\">111</a></li>\n<li>Fragments Must Be Used <a href=\"https://github.com/ChilliCream/hotchocolate/issues/116\">116</a></li>\n<li>Fragment Name Uniqueness <a href=\"https://github.com/ChilliCream/hotchocolate/issues/113\">113</a></li>\n<li>Leaf Field Selections <a href=\"https://github.com/ChilliCream/hotchocolate/issues/110\">110</a></li>\n<li>Fragments On Composite Types <a href=\"https://github.com/ChilliCream/hotchocolate/issues/115\">115</a></li>\n<li>Fragment spreads must not form cycles <a href=\"https://github.com/ChilliCream/hotchocolate/issues/118\">118</a></li>\n<li>Fragment spread target defined <a href=\"https://github.com/ChilliCream/hotchocolate/issues/117\">117</a></li>\n<li>Fragment spread is possible <a href=\"https://github.com/ChilliCream/hotchocolate/issues/119\">119</a></li>\n<li>Fragment Spread Type Existence <a href=\"https://github.com/ChilliCream/hotchocolate/issues/114\">114</a></li>\n<li>Input Object Field Names <a href=\"https://github.com/ChilliCream/hotchocolate/issues/121\">121</a></li>\n<li>Input Object Required Fields <a href=\"https://github.com/ChilliCream/hotchocolate/issues/123\">123</a></li>\n<li>Input Object Field Uniqueness <a href=\"https://github.com/ChilliCream/hotchocolate/issues/122\">122</a></li>\n<li>Directives Are Defined <a href=\"https://github.com/ChilliCream/hotchocolate/issues/124\">124</a></li>\n<li>Values of Correct Type <a href=\"https://github.com/ChilliCream/hotchocolate/issues/120\">120</a></li>\n</ul>\n<p>We now also support the <code class=\"language-text\">@deprectaed</code> directive when using schema-first.</p>\n<p>Furthermore, we fixed a lot of bugs around schema-first. So, at the moment code-first is still the most viable way to create a schema,but we are working hard to get both flavours on par.</p>\n<p>Apart from that we now allow for non-terminating errors within a field-resolver.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> IEnumerable<span class=\"token operator\">&lt;</span>ICharacter<span class=\"token operator\">></span> <span class=\"token function\">GetCharacter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> characterIds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IResolverContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> characterId <span class=\"token keyword\">in</span> characterIds<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ICharacter</span> character <span class=\"token operator\">=</span> _repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetCharacter</span><span class=\"token punctuation\">(</span>characterId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>character <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportError</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Could not resolve a charachter for the \"</span> <span class=\"token operator\">+</span>\n                $<span class=\"token string\">\"character-id {characterId}.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> character<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you want to share resolver logic between types in your schema you can now do that with shared resolvers which can be bound to fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonResolvers</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">>></span> <span class=\"token function\">GetFriends</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetFriendsAsync</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>FriendIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonType</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObjectType</span><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>IObjectDescriptor<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> desc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        desc<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>FriendIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        desc<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Field</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PersonResolver</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">GetFriends</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>What Comes Next</h2>\n<p>With version 0.5 we will focus on subscriptions and custom directives.</p>\n<p>Custom will allow for writing field resolver middlewares that alter or replace the default execution behaviour.</p>\n<p>Subscriptions is one of our last spec gaps.</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://hotchocolate.io\">Hot Chocolate Documentation</a></th>\n<th><a href=\"https://github.com/ChilliCream/hotchocolate\">Hot Chocolate on GitHub</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>","frontmatter":{"author":"Michael Staib","date":"September 02, 2018","path":"/blog/2018/09/02/hot-chocolate-0.4.5","title":"GraphQL - Hot Chocolate 0.4.5"}},"site":{"siteMetadata":{"baseUrl":"https://chillicream.com"}}},"pageContext":{}}}