{"componentChunkName":"component---src-templates-blog-article-tsx","path":"/blog/2018/07/31/hot-chocolate-0.4.0","result":{"data":{"markdownRemark":{"html":"<p>With this version we introduce support for <em>DataLoaders</em> and custom context objects.</p>\n<h2>Data Loaders</h2>\n<p>Here is a short introduction to <em>DataLoaders</em>.</p>\n<blockquote>\n<p>A DataLoader is a generic utility to be used as part of your application's data fetching layer to\nprovide a consistent API over various backends and reduce requests to those backends via batching\nand caching. -- facebook</p>\n</blockquote>\n<p>If you want to read more about <em>DataLoaders</em> in general, you can head over to Facebook's <a href=\"https://github.com/facebook/dataloader\">GitHub repository</a>.</p>\n<p>GraphQL is very flexible in the way you can request data. This flexibility also introduces new classes of problems called <em>n+1</em> issues for the GraphQL server developer.</p>\n<p>In order to depict the issue that DataLoaders solve in this context, let me introduce a little GraphQL schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">person</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Person\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">friends</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The above schema allows to fetch a person by its internal identifier and each person has a list of friends that is represented by a list of persons.</p>\n<p>Since GraphQL requests are not fixed requests like REST requests, the developer really defines what data he/she wants. This avoids overfetching data that you do not need and also saves you unecessary roundtrips to the GraphQL backend.</p>\n<p>So, a query against the above schema could look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">a</span><span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token attr-name\">b</span><span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The above request fetches two persons in one go without the need to call the backend twice. The problem for the GraphQL backend is that field resolvers are atomic and do not have any knoledge about the query as a whole. So, a field resolver does not know that it will be called multiple times in parallel to fetch similar or equal data from the same data source.</p>\n<p>This basically represents the first case where <em>DataLoaders</em> help us by batching requests against our database or backend service. Currently, we allow <em>DataLoaders</em> per request and globally.</p>\n<p>So, let's look at some code in order to understand what they are doing. First, let's have a look at how we would write our field resolver without <em>DataLoaders</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">GetPerson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPersonById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The above example would result in two calls to the person repository that would than fetch the persons one by one from our data source.</p>\n<p>If you think that through you can see that each GraphQL request would cause multiple requests to our data source resulting in slugish performance and uneccessary roundtrips to our data source.</p>\n<p>This, means that we reduced the roundtrips from our client to our server with GraphQL but multiplied the roundtrips between the data sources and the service layer.</p>\n<p>With <em>DataLoaders</em> we can now centralise our person fetching and reduce the number of round trips to our data source.</p>\n<p>First, we have to create a <em>DataLoader</em> that now acts as intermediary between a field resolver and the data source.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonDataLoader</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DataLoaderBase</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Person<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IPersonRepository</span> _repository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">PersonDataLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">DataLoaderOptions</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _repository <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> Task<span class=\"token operator\">&lt;</span>IReadOnlyList<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">Fetch</span><span class=\"token punctuation\">(</span>\n        IReadOnlyList<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> keys<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPersonBatch</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <em>DataLoader</em> is now injected by the execution engine as a field resolver argument.</p>\n<p><em>DataLoaders</em> have to be injected at field resolver argument level and <strong>NOT</strong> as constructor arguments since the lifetime of a <em>DataLoader</em> is in many cases shorter than the class containing the field resolvers.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">GetPerson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">DataLoader</span><span class=\"token punctuation\">]</span><span class=\"token class-name\">PersonDataLoader</span> personLoader<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> personLoader<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Next, we have to register our <em>DataLoader</em> with the schema. By default, <em>DataLoaders</em> are registerd as per-request meaning that the execution engine will create one instance of each <em>DataLoader</em> per-request <strong>if</strong> a field resolver has requested a <em>DataLoader</em>. This ensures that, <em>DataLoaders</em> that are not beeing requested are not instantiated unnecessarily.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\">Schema<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// your other code...</span>\n\n    c<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterDataLoader</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PersonDataLoader</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now, person requests in a single execution batch will be batched to the data source.</p>\n<p>But there are still some more issues ahead that <em>DataLoaders</em> will help us with. For that we should amend our query a little bit.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">a</span><span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    friends <span class=\"token punctuation\">{</span>\n      name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token attr-name\">b</span><span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    friends <span class=\"token punctuation\">{</span>\n      name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The above query now drills down into the friends property, which again yields persons.</p>\n<p>Let's, say our person object is located in a mongo database and the document would look something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"a\"</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Foo\"</span>\n  <span class=\"token property\">\"friends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"d\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"b\"</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Bar\"</span>\n  <span class=\"token property\">\"friends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"e\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The person with ID <code class=\"language-text\">a</code> is also friends with person <code class=\"language-text\">b</code>. Moreover, <code class=\"language-text\">a</code> is also friends with <code class=\"language-text\">c</code> and <code class=\"language-text\">d</code>. Furthermore, <code class=\"language-text\">b</code> is friends with <code class=\"language-text\">a</code> and also friends with <code class=\"language-text\">c</code> and <code class=\"language-text\">e</code>.\nThe best case now would be that we only fetch <code class=\"language-text\">c</code>, <code class=\"language-text\">d</code> and <code class=\"language-text\">e</code> since we have already fetched <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.</p>\n<p>This is the second problem class the <em>DataLoader</em> utility helps us with since the <em>DataLoader</em> contains a cache and holds the resolved instances by default for the duration of your request.</p>\n<p>For more information about our <em>DataLoader</em> implementation head over to our <em>DataLoader</em> <a href=\"https://github.com/ChilliCream/greendonut\">GitHub repository</a>.</p>\n<p>As a side note, you are not bound to our <em>DataLoader</em> implementation. If you want to create your own implementation of <em>DataLoaders</em> or if you already have a <em>DataLoader</em> implementation then you can hook this up to our execution engine as well. I will explain this in the <em>DataLoader</em> documentation once I have finalised it.</p>\n<h2>Custom Context Objects</h2>\n<p>Custom context objects are basically custom .net objects that you can declare with the GraphQL engine and access throughout your request execution. Custom context objects can use dependency injection and have the same scoping as the <em>DataLoaders</em>.</p>\n<p>For example you could declare a class that handles authorithation for your service like an IPrincipal and access this in each resolver.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>ResolverResult<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">>></span> <span class=\"token function\">GetPerson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">]</span><span class=\"token class-name\">MyPrincipal</span> principal<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>principal<span class=\"token punctuation\">.</span><span class=\"token function\">IsInRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">ResolverResult</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>personLoader<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">ResolverResult</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"You do not have the access role to access this person.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Moreover, you can use this custom context to store states in or caches during execution time. This will become especially usefull with our next version when we allow the writing of custom schema directives and field resolver middlewares.</p>\n<p>Custom context objects are registerd like <em>DataLoaders</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\">Schema<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// your other code...</span>\n\n    c<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">RegisterCustomContext</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyPrincipal</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Like with <em>DataLoaders</em> we have muliple <code class=\"language-text\">RegisterCustomContext</code> overloads that allow for more control over how the object is created.</p>\n<h2>Query Validation</h2>\n<p>With this release we have also implemented the following query validation rules:</p>\n<ul>\n<li><a href=\"http://facebook.github.io/graphql/June2018/#sec-All-Variables-Used\">All Variables Used</a></li>\n<li><a href=\"http://facebook.github.io/graphql/June2018/#sec-All-Variable-Uses-Defined\">All Variable Uses Defined</a></li>\n<li><a href=\"http://facebook.github.io/graphql/June2018/#sec-Directives-Are-In-Valid-Locations\">Directives Are In Valid Locations</a></li>\n<li><a href=\"http://facebook.github.io/graphql/June2018/#sec-Directives-Are-Unique-Per-Location\">Directives Are Unique Per Location</a></li>\n<li><a href=\"http://facebook.github.io/graphql/June2018/#sec-Variables-Are-Input-Types\">Variables Are Input Types</a></li>\n<li><a href=\"http://facebook.github.io/graphql/June2018/#sec-Field-Selection-Merging\">Field Selection Merging</a></li>\n</ul>\n<p>You can follow our progress on which rule is implemented <a href=\"https://github.com/ChilliCream/hotchocolate/projects/3\">here</a>.</p>\n<p>We plan for full compliance with the June 2018 spec version with version 0.6.0.</p>\n<h2>Dependency Injection</h2>\n<p>We reworked out dependency injection approach and have now integreaded the request services during request execution. Meaning you are now able to access HttpContext directly as a field resolver argument.</p>\n<p>This was already possible with the old version through the accessor as a constructor injection.</p>\n<p>Generally speaking, you can now let the execution engine inject any service as a field resolver argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">Example1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IPersonRepository</span> repository<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPersonById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token function\">Example2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">]</span><span class=\"token class-name\">HttpContext</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">GetPersonById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It is important to know that http related services are only available if the execution engine runs integrated into ASP.net core. So, basically if you are using our middleware.</p>\n<p>From a design standpoint you should avoid accessing this directly and think about a custom context object which would provide some abstraction.</p>\n<p>I will write some more on dependency injection sometime later this week.</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://hotchocolate.io\">Hot Chocolate Documentation</a></th>\n<th><a href=\"https://github.com/ChilliCream/hotchocolate\">Hot Chocolate on GitHub</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>","frontmatter":{"author":"Michael Staib","date":"July 31, 2018","path":"/blog/2018/07/31/hot-chocolate-0.4.0","title":"GraphQL - Hot Chocolate 0.4.0"}}},"pageContext":{}}}