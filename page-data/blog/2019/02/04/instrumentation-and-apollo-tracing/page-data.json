{"componentChunkName":"component---src-templates-blog-article-tsx","path":"/blog/2019/02/04/instrumentation-and-apollo-tracing","result":{"data":{"markdownRemark":{"html":"<p>Today we have released Hot Chocolate <code class=\"language-text\">0.7.0</code>, containing one cool new feature,\nwe wanne talk about here, namely <em>Apollo Tracing</em> which is extremely powerful in\nidentifing things like performance bottlenecks in our <em>GraphQL</em> <em>APIs</em> for\nexample. As a result, we had to enhance our general instrumentation layer, which\nwe all benefit from. For instance, now it's way easier to register a\n<em>DiagnosticObserver</em> and bring in your own tracing framework, respectively. In\nthis blog article we will focus on these two topics.</p>\n<h2 id=\"apollo-tracing\" style=\"position:relative;\"><a href=\"#apollo-tracing\" aria-label=\"apollo tracing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo Tracing</h2>\n<p><em>Apollo Tracing</em> is a <a href=\"https://github.com/apollographql/apollo-tracing\">performance tracing specification</a> for <em>GraphQL</em> servers.\nIt's not part of the actual <em>GraphQL</em> <a href=\"https://facebook.github.io/graphql\">specification</a> itself, but there is a\ncommon agreement in the <em>GraphQL</em> community that this should be supported by\nall <em>GraphQL</em> servers.</p>\n<p>So, we decided to introduce built-in <em>Apollo Tracing</em> support with this version.\nIn order to enable <em>Apollo Tracing</em> we just need to provide our own instance of\n<code class=\"language-text\">QueryExecutionOptions</code> to the <code class=\"language-text\">AddGraphQL</code> extension method and set the\n<code class=\"language-text\">TracingPreference</code> option to either <code class=\"language-text\">TracingPreference.Always</code> or\n<code class=\"language-text\">TracingPreference.OnDemand</code>. The difference between these two options is\nwhether tracing should be enabled always which means for each request or on\ndemand which means per request. But for now, enough words, let's see how this\nwould look like in code.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">=></span> Schema<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Here goes the schema definition which is omitted for brevity purpose</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryExecutionOptions</span>\n<span class=\"token punctuation\">{</span>\n    TracingPreference <span class=\"token operator\">=</span> TracingPreference<span class=\"token punctuation\">.</span>Always\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There it is. Very simple and straightforward, right? For more information head\nover <a href=\"https://hotchocolate.io/docs/apollo-tracing\">here</a>. Now, let's jump over to\nthe next topic.</p>\n<h2 id=\"instrumentation-api\" style=\"position:relative;\"><a href=\"#instrumentation-api\" aria-label=\"instrumentation api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Instrumentation API</h2>\n<p>In this version we did some heavy lifting in form of refactorings regarding the\nquery execution pipeline. This really helped us enhancing the\n<em>Instrumentation</em> <em>API</em> which has been evolved in two ways. First, we increased\nthe amount of available diagnostic events for more fine-grained tracing\nscenarios. Second, we simplified the registering of <em>DiagnosticObservers</em> by\nusing <em>Dependancy Injection</em> infrastructure. In the next example we can see how\nto register a custom <em>DiagnosticObservers</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddGraphQL</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">=></span> Schema<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Here goes the schema definition which is omitted for brevity purpose</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nbuilder <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> builder\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseDefaultPipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddDiagnosticObserver</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomDiagnosticObserver</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So far so good. Writing a custom <em>DiagnosticObservers</em> is not difficult. Let's\nsee how we could achieve this.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> HotChocolate<span class=\"token punctuation\">.</span>Execution<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>DiagnosticAdapter<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> CustomNamespace\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomDiagnosticObserver</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDiagnosticObserver</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token class-name\">DiagnosticName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">QueryExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// This method is required to enable recording \"Query.Start\" and</span>\n            <span class=\"token comment\">// \"Query.Stop\" diagnostic events. Do not write code in here.</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token class-name\">DiagnosticName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BeginQueryExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Here goes your code to trace begin query execution events.</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token class-name\">DiagnosticName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HotChocolate.Execution.Query.Stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">EndQueryExecute</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">IQueryContext</span> context<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">IExecutionResult</span> result<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Here goes your code to trace end query execution events.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In the above example we showed you just a few diagnostic events. Head over\n<a href=\"https://hotchocolate.io/docs/instrumentation\">here</a> for a complete list of\ndiagnostic events.</p>\n<p>We hope you enjoyed reading and be welcome to let us know what you think about\nit in the comments section. Thank you!</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://hotchocolate.io\">Hot Chocolate Documentation</a></th>\n<th><a href=\"https://github.com/ChilliCream/hotchocolate\">Hot Chocolate on GitHub</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>","frontmatter":{"author":"Rafael Staib","authorImageUrl":"https://avatars0.githubusercontent.com/u/4325318?s=100&v=4","authorUrl":"https://github.com/rstaib","date":"February 04, 2019","path":"/blog/2019/02/04/instrumentation-and-apollo-tracing","title":"GraphQL .NET Instrumentation API and Apollo Tracing"}},"site":{"siteMetadata":{"baseUrl":"https://chillicream.com"}}},"pageContext":{}}}