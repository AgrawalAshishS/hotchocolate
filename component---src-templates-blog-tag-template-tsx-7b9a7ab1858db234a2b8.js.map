{"version":3,"sources":["webpack:///./src/templates/blog-tag-template.tsx","webpack:///./src/components/widgets/blog-articles.tsx"],"names":["BlogTagTemplate","pageContext","data","tag","title","pageQuery","BlogArticles","edges","allMarkdownRemark","Container","map","node","existingTags","frontmatter","tags","filter","length","Article","key","id","to","path","featuredImage","childImageSharp","fluid","author","authorImageUrl","authorUrl","date","readingTime","fields","text","styled","ul","li"],"mappings":"6FACA,8GAWeA,UAPS,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,KAC5BC,EAAQF,EAARE,IACR,OAAQ,kBAAC,IAAD,KACN,kBAAC,IAAD,CAAKC,MAAK,yBAA2BD,IACrC,kBAAC,IAAD,CAAcD,KAAMA,MAInB,IAAMG,EAAY,a,kCCbzB,4IAOaC,EAAe,SAAC,GAAqC,IACtDC,EADsD,EAAnCL,KAAQM,kBAC3BD,MACR,OAAQ,kBAACE,EAAD,KACLF,EAAMG,KAAI,YAAc,YAAXC,EAAW,EAAXA,KACNC,GAAeD,SAAA,UAAAA,EAAME,mBAAN,eAAmBC,MAClCH,EAAKE,YAAYC,KAAKC,QAAO,SAAAZ,GAAG,OAAIA,GAAOA,EAAIa,OAAS,KACxD,GACN,OAAQ,kBAACC,EAAD,CAASC,IAAG,WAAaP,EAAKQ,IAClC,kBAAC,IAAD,CAAMC,GAAIT,EAAKE,YAAYQ,OACxBV,SAAA,UAAAA,EAAME,mBAAN,mBAAmBS,qBAAnB,mBAAkCC,uBAAlC,eAAmDC,QAAU,kBAAC,IAAD,CAAKA,MAAOb,EAAKE,YAAYS,cAAcC,gBAC1GC,QACC,kBAAC,IAAD,KAAeb,EAAKE,YAAYT,QAElC,kBAAC,IAAD,CAAqBqB,OAAQd,EAAKE,YAAYY,OAAQC,eAAgBf,EAAKE,YAAYa,eAAgBC,UAAWhB,EAAKE,YAAYc,UAAWC,KAAMjB,EAAKE,YAAYe,KAAMC,YAAalB,EAAKmB,OAAOD,YAAYE,OAChN,kBAAC,IAAD,CAAiBjB,KAAMF,UAK7BH,EAAYuB,IAAOC,GAAV,2EAAGD,CAAH,gHASTf,EAAUe,IAAOE,GAAV,yEAAGF,CAAH","file":"component---src-templates-blog-tag-template-tsx-7b9a7ab1858db234a2b8.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport { SEO } from \"../components/misc/seo\";\nimport { Layout } from \"../components/structure/layout\";\nimport { BlogArticles } from \"../components/widgets/blog-articles\";\nconst BlogTagTemplate = ({ pageContext, data, }) => {\n    const { tag } = pageContext;\n    return (<Layout>\n      <SEO title={`Blog Articles By Tag: ${tag}`}/>\n      <BlogArticles data={data}/>\n    </Layout>);\n};\nexport default BlogTagTemplate;\nexport const pageQuery = graphql `\n  query getBlogArticlesByTag($tag: String) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n      limit: 100\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          fields {\n            readingTime {\n              text\n            }\n          }\n          frontmatter {\n            author\n            authorImageUrl\n            authorUrl\n            date(formatString: \"MMMM DD, YYYY\")\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            path\n            tags\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { ArticleTitle } from \"../misc/blog-article-elements\";\nimport { BlogArticleMetadata } from \"../misc/blog-article-metadata\";\nimport { BlogArticleTags } from \"../misc/blog-article-tags\";\nimport { Link } from \"../misc/link\";\nexport const BlogArticles = ({ data: { allMarkdownRemark }, }) => {\n    const { edges } = allMarkdownRemark;\n    return (<Container>\n      {edges.map(({ node }) => {\n        const existingTags = node?.frontmatter?.tags\n            ? node.frontmatter.tags.filter(tag => tag && tag.length > 0)\n            : [];\n        return (<Article key={`article-${node.id}`}>\n            <Link to={node.frontmatter.path}>\n              {node?.frontmatter?.featuredImage?.childImageSharp?.fluid && (<Img fluid={node.frontmatter.featuredImage.childImageSharp\n            .fluid}/>)}\n              <ArticleTitle>{node.frontmatter.title}</ArticleTitle>\n            </Link>\n            <BlogArticleMetadata author={node.frontmatter.author} authorImageUrl={node.frontmatter.authorImageUrl} authorUrl={node.frontmatter.authorUrl} date={node.frontmatter.date} readingTime={node.fields.readingTime.text}/>\n            <BlogArticleTags tags={existingTags}/>\n          </Article>);\n    })}\n    </Container>);\n};\nconst Container = styled.ul `\n  display: flex;\n  flex: 0 0 auto;\n  flex-direction: column;\n  margin: 0;\n  width: 100%;\n  max-width: 800px;\n  list-style-type: none;\n`;\nconst Article = styled.li `\n  margin-bottom: 15px;\n\n  @media only screen and (min-width: 800px) {\n    border: 1px solid #ccc;\n  }\n`;\n"],"sourceRoot":""}