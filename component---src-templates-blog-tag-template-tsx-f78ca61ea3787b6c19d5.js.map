{"version":3,"sources":["webpack:///./src/templates/blog-tag-template.tsx","webpack:///./src/components/widgets/blog-articles.tsx"],"names":["BlogTagTemplate","pageContext","data","tag","title","pageQuery","BlogArticles","edges","allMarkdownRemark","Container","map","node","existingTags","frontmatter","tags","filter","length","Article","key","id","to","path","featuredImage","childImageSharp","fluid","Title","Metadata","AuthorLink","authorUrl","AuthorImage","src","authorImageUrl","author","date","fields","readingTime","text","Tags","Tag","TagLink","styled","ul","li","h1","div","Link","img"],"mappings":"6FACA,8GAWeA,UAPS,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,KAC5BC,EAAQF,EAARE,IACR,OAAQ,kBAAC,IAAD,KACN,kBAAC,IAAD,CAAKC,MAAK,yBAA2BD,IACrC,kBAAC,IAAD,CAAcD,KAAMA,MAInB,IAAMG,EAAY,c,kCCbzB,wGAIaC,EAAe,SAAC,GAAqC,IACtDC,EADsD,EAAnCL,KAAQM,kBAC3BD,MACR,OAAQ,kBAACE,EAAD,KACLF,EAAMG,KAAI,YAAc,YAAXC,EAAW,EAAXA,KACNC,GAAeD,SAAA,UAAAA,EAAME,mBAAN,eAAmBC,MAClCH,EAAKE,YAAYC,KAAKC,QAAO,SAAAZ,GAAG,OAAIA,GAAOA,EAAIa,OAAS,KACxD,GACN,OAAQ,kBAACC,EAAD,CAASC,IAAKP,EAAKQ,IACvB,kBAAC,IAAD,CAAMC,GAAIT,EAAKE,YAAYQ,OACxBV,SAAA,UAAAA,EAAME,mBAAN,mBAAmBS,qBAAnB,mBAAkCC,uBAAlC,eAAmDC,QAAU,kBAAC,IAAD,CAAKA,MAAOb,EAAKE,YAAYS,cAAcC,gBAC1GC,QACC,kBAACC,EAAD,KAAQd,EAAKE,YAAYT,QAE3B,kBAACsB,EAAD,KACE,kBAACC,EAAD,CAAYP,GAAIT,EAAKE,YAAYe,WAC/B,kBAACC,EAAD,CAAaC,IAAKnB,EAAKE,YAAYkB,iBAClCpB,EAAKE,YAAYmB,QACN,IAJhB,KAKKrB,EAAKE,YAAYoB,KALtB,MAK+BtB,EAAKuB,OAAOC,YAAYC,MAEtDxB,EAAaI,OAAS,GAAM,kBAACqB,EAAD,KACxBzB,EAAaF,KAAI,SAAAP,GAAG,OAAK,kBAACmC,EAAD,KACtB,kBAACC,EAAD,CAASnB,GAAE,cAAgBjB,GAAQA,cAOjDM,EAAY+B,IAAOC,GAAV,2EAAGD,CAAH,gHASTvB,EAAUuB,IAAOE,GAAV,yEAAGF,CAAH,yFAOPf,EAAQe,IAAOG,GAAV,uEAAGH,CAAH,wJAWLd,EAAWc,IAAOI,IAAV,0EAAGJ,CAAH,2JAWRb,EAAaa,YAAOK,KAAV,4EAAGL,CAAH,kFAOVX,EAAcW,IAAOM,IAAV,6EAAGN,CAAH,qEAMXH,EAAOG,IAAOC,GAAV,sEAAGD,CAAH,2GAQJF,EAAME,IAAOE,GAAV,qEAAGF,CAAH,oJAUHD,EAAUC,YAAOK,KAAV,yEAAGL,CAAH","file":"component---src-templates-blog-tag-template-tsx-f78ca61ea3787b6c19d5.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport { SEO } from \"../components/misc/seo\";\nimport { Layout } from \"../components/structure/layout\";\nimport { BlogArticles } from \"../components/widgets/blog-articles\";\nconst BlogTagTemplate = ({ pageContext, data, }) => {\n    const { tag } = pageContext;\n    return (<Layout>\n      <SEO title={`Blog Articles By Tag: ${tag}`}/>\n      <BlogArticles data={data}/>\n    </Layout>);\n};\nexport default BlogTagTemplate;\nexport const pageQuery = graphql `\n  query getBlogArticlesByTag($tag: String) {\n    allMarkdownRemark(\n      limit: 100\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          fields {\n            readingTime {\n              text\n            }\n          }\n          frontmatter {\n            author\n            authorImageUrl\n            authorUrl\n            date(formatString: \"MMMM DD, YYYY\")\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            path\n            tags\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"../misc/link\";\nexport const BlogArticles = ({ data: { allMarkdownRemark }, }) => {\n    const { edges } = allMarkdownRemark;\n    return (<Container>\n      {edges.map(({ node }) => {\n        const existingTags = node?.frontmatter?.tags\n            ? node.frontmatter.tags.filter(tag => tag && tag.length > 0)\n            : [];\n        return (<Article key={node.id}>\n            <Link to={node.frontmatter.path}>\n              {node?.frontmatter?.featuredImage?.childImageSharp?.fluid && (<Img fluid={node.frontmatter.featuredImage.childImageSharp\n            .fluid}/>)}\n              <Title>{node.frontmatter.title}</Title>\n            </Link>\n            <Metadata>\n              <AuthorLink to={node.frontmatter.authorUrl}>\n                <AuthorImage src={node.frontmatter.authorImageUrl}/>\n                {node.frontmatter.author}\n              </AuthorLink>{\" \"}\n              ・ {node.frontmatter.date} ・ {node.fields.readingTime.text}\n            </Metadata>\n            {existingTags.length > 0 && (<Tags>\n                {existingTags.map(tag => (<Tag>\n                    <TagLink to={`/blog/tags/${tag}`}>{tag}</TagLink>\n                  </Tag>))}\n              </Tags>)}\n          </Article>);\n    })}\n    </Container>);\n};\nconst Container = styled.ul `\n  display: flex;\n  flex: 0 0 auto;\n  flex-direction: column;\n  margin: 0;\n  width: 100%;\n  max-width: 800px;\n  list-style-type: none;\n`;\nconst Article = styled.li `\n  margin-bottom: 15px;\n\n  @media only screen and (min-width: 800px) {\n    border: 1px solid #ccc;\n  }\n`;\nconst Title = styled.h1 `\n  margin-top: 20px;\n  margin-right: 20px;\n  margin-left: 20px;\n  font-size: 1.667em;\n\n  @media only screen and (min-width: 800px) {\n    margin-right: 50px;\n    margin-left: 50px;\n  }\n`;\nconst Metadata = styled.div `\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin: 0 20px 20px;\n  font-size: 0.778em;\n\n  @media only screen and (min-width: 800px) {\n    margin: 0 50px 20px;\n  }\n`;\nconst AuthorLink = styled(Link) `\n  display: flex;\n  flex: 0 0 auto;\n  flex-direction: row;\n  align-items: center;\n  color: #666;\n`;\nconst AuthorImage = styled.img `\n  flex: 0 0 auto;\n  margin-right: 0.5em;\n  border-radius: 15px;\n  width: 30px;\n`;\nconst Tags = styled.ul `\n  margin: 0 20px 20px;\n  list-style-type: none;\n\n  @media only screen and (min-width: 800px) {\n    margin: 0 50px 20px;\n  }\n`;\nconst Tag = styled.li `\n  display: inline-block;\n  margin: 0 5px 0 0;\n  border-radius: 4px;\n  padding: 0;\n  background-color: #f40010;\n  font-size: 0.722em;\n  letter-spacing: 0.05em;\n  color: #fff;\n`;\nconst TagLink = styled(Link) `\n  display: block;\n  padding: 5px 15px;\n  color: #fff;\n`;\n"],"sourceRoot":""}